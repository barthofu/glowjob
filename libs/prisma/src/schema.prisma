datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator zodDto {
    provider = "prisma-zod-generator"
    output   = "./generated/zod"
}

generator zodModel {
    provider              = "nestjs-zod-prisma"
    output                = "./generated/zod/models" // (default) the directory where generated zod schemas will be saved
    relationModel         = false // (default) Create and export both plain and related models.
    // relationModel         = "default" // Do not export model without relations.
    // relationModel         = false // Do not generate related model
    generateDto           = true // (default) Generate DTOs for NestJS
    modelCase             = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
    // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)
    modelSuffix           = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas
    dtoCase               = "PascalCase" // (default) Output DTOs using pascal case (ex. UserDto, PostDto)
    // dtoCase             = "camelCase" // Output DTOs using camel case (ex. userDto, postDto)
    dtoSuffix             = "Dto" // (default) Suffix to apply to your prisma models when naming DTOs
    // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
    useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
    // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable
    // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
    prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
    // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model User {
    // Attributes
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    email     String   @unique
    firstName String
    lastName  String
    gender    String
    password  String
    role      String   @default("user")

    // Relations
    reservations Reservation[]
}

model Movie {
    // Attributes
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    title       String
    genre       String?
    releaseDate DateTime
    synopsis    String?
    duration    Int
    country     String?
    popularity  Float
    featured    Boolean  @default(true) // films Ã  l'affiche actuellement
    deleted     Boolean  @default(false)

    // Relations
    poster       Picture?    @relation("posterId", fields: [posterId], references: [id])
    posterId     Int?
    background   Picture?    @relation("backgroundId", fields: [backgroundId], references: [id])
    backgroundId Int?
    realisator   Realisator? @relation(fields: [realisatorId], references: [id])
    realisatorId Int?
    screenings   Screening[]
    actors       Actor[]
}

model Screening {
    // Attributes
    id               Int      @id @default(autoincrement())
    createdAt        DateTime @default(now())
    startTime        DateTime
    room             Int
    roomCapacity     Int
    availableSeats   Int
    handicapFriendly Boolean  @default(true)
    language         String   @default("VF")
    deleted          Boolean  @default(false)

    // Relations
    reservations Reservation[]
    movie        Movie         @relation(fields: [movieId], references: [id])
    movieId      Int
}

model Realisator {
    // Attributes
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    name      String
    idTmdb    Int
    deleted   Boolean  @default(false)

    // Relations
    moviesRealised Movie[]
    icon           Picture? @relation(fields: [iconId], references: [id])
    iconId         Int?
}

model Actor {
    // Attributes
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    name      String
    idTmdb    Int
    deleted   Boolean  @default(false)

    // Relations
    moviesPlayed Movie[]
    icon         Picture? @relation(fields: [iconId], references: [id])
    iconId       Int?
}

model Picture {
    // Attributes
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    url          String   @unique
    cloudinaryId String   @unique

    moviePosters     Movie[]      @relation("posterId")
    movieBackgrounds Movie[]      @relation("backgroundId")
    realisators      Realisator[]
    actors           Actor[]
}

model Reservation {
    // Attributes
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    status      String
    checkoutId  String   @unique
    checkoutUrl String   @unique
    amount      Int      @default(1)
    price       Int

    // Relations
    user        User      @relation(fields: [userId], references: [id])
    userId      Int
    screening   Screening @relation(fields: [screeningId], references: [id])
    screeningId Int
}
