/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.1
 */
import * as reactQuery from '@tanstack/react-query'
import { useApiContext, ApiContext } from './apiContext'
import type * as Fetcher from './apiFetcher'
import { apiFetch } from './apiFetcher'
import type * as Schemas from './apiSchemas'

export type SaveError = Fetcher.ErrorWrapper<undefined>

export type SaveVariables = {
	body: Schemas.CompanyDto
} & ApiContext['fetcherOptions']

export const fetchSave = (variables: SaveVariables, signal?: AbortSignal) =>
	apiFetch<Schemas.CompanyDto, SaveError, Schemas.CompanyDto, {}, {}, {}>({
		url: '/api/company',
		method: 'post',
		...variables,
		signal,
	})

export const useSave = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.CompanyDto,
			SaveError,
			SaveVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<Schemas.CompanyDto, SaveError, SaveVariables>(
		{
			mutationFn: (variables: SaveVariables) =>
				fetchSave({ ...fetcherOptions, ...variables }),
			...options,
		}
	)
}

export type FindByIdPathParams = {
	id: string
}

export type FindByIdError = Fetcher.ErrorWrapper<undefined>

export type FindByIdVariables = {
	pathParams: FindByIdPathParams
} & ApiContext['fetcherOptions']

export const fetchFindById = (
	variables: FindByIdVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.Offer,
		FindByIdError,
		undefined,
		{},
		{},
		FindByIdPathParams
	>({ url: '/api/offer/{id}', method: 'get', ...variables, signal })

export const useFindById = <TData = Schemas.Offer,>(
	variables: FindByIdVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<Schemas.Offer, FindByIdError, TData>,
		'queryKey' | 'queryFn' | 'initialData'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<Schemas.Offer, FindByIdError, TData>({
		queryKey: queryKeyFn({
			path: '/api/offer/{id}',
			operationId: 'findById',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchFindById({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type SearchQueryParams = {
	/**
	 * Offers' keywords
	 */
	query: string
	/**
	 * Offers' area
	 */
	area?: string
	/**
	 * Offers' department
	 */
	department?: string
	/**
	 * Offers' city
	 */
	city?: string
	/**
	 * Offers' inside city's area. Can only be used with city parameter
	 *
	 * @format int32
	 */
	distance?: number
	/**
	 * Offers' contract type
	 */
	contractType?: string
}

export type SearchError = Fetcher.ErrorWrapper<undefined>

export type SearchVariables = {
	queryParams: SearchQueryParams
} & ApiContext['fetcherOptions']

export const fetchSearch = (variables: SearchVariables, signal?: AbortSignal) =>
	apiFetch<
		Schemas.ListResultOffer,
		SearchError,
		undefined,
		{},
		SearchQueryParams,
		{}
	>({ url: '/api/offer/search', method: 'get', ...variables, signal })

export const useSearch = <TData = Schemas.ListResultOffer,>(
	variables: SearchVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<Schemas.ListResultOffer, SearchError, TData>,
		'queryKey' | 'queryFn' | 'initialData'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<Schemas.ListResultOffer, SearchError, TData>({
		queryKey: queryKeyFn({
			path: '/api/offer/search',
			operationId: 'search',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchSearch({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type DepartmentReferenceError = Fetcher.ErrorWrapper<undefined>

export type DepartmentReferenceResponse = Schemas.DepartmentReference[]

export type DepartmentReferenceVariables = ApiContext['fetcherOptions']

export const fetchDepartmentReference = (
	variables: DepartmentReferenceVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		DepartmentReferenceResponse,
		DepartmentReferenceError,
		undefined,
		{},
		{},
		{}
	>({
		url: '/api/offer/reference/department',
		method: 'get',
		...variables,
		signal,
	})

export const useDepartmentReference = <TData = DepartmentReferenceResponse,>(
	variables: DepartmentReferenceVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			DepartmentReferenceResponse,
			DepartmentReferenceError,
			TData
		>,
		'queryKey' | 'queryFn' | 'initialData'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		DepartmentReferenceResponse,
		DepartmentReferenceError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/offer/reference/department',
			operationId: 'departmentReference',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchDepartmentReference(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ContractTypeReferenceError = Fetcher.ErrorWrapper<undefined>

export type ContractTypeReferenceResponse = Schemas.ContractTypeReference[]

export type ContractTypeReferenceVariables = ApiContext['fetcherOptions']

export const fetchContractTypeReference = (
	variables: ContractTypeReferenceVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		ContractTypeReferenceResponse,
		ContractTypeReferenceError,
		undefined,
		{},
		{},
		{}
	>({
		url: '/api/offer/reference/contract-type',
		method: 'get',
		...variables,
		signal,
	})

export const useContractTypeReference = <
	TData = ContractTypeReferenceResponse,
>(
	variables: ContractTypeReferenceVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			ContractTypeReferenceResponse,
			ContractTypeReferenceError,
			TData
		>,
		'queryKey' | 'queryFn' | 'initialData'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		ContractTypeReferenceResponse,
		ContractTypeReferenceError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/offer/reference/contract-type',
			operationId: 'contractTypeReference',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchContractTypeReference(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type AreaReferenceError = Fetcher.ErrorWrapper<undefined>

export type AreaReferenceResponse = Schemas.AreaReference[]

export type AreaReferenceVariables = ApiContext['fetcherOptions']

export const fetchAreaReference = (
	variables: AreaReferenceVariables,
	signal?: AbortSignal
) =>
	apiFetch<AreaReferenceResponse, AreaReferenceError, undefined, {}, {}, {}>({
		url: '/api/offer/reference/area',
		method: 'get',
		...variables,
		signal,
	})

export const useAreaReference = <TData = AreaReferenceResponse,>(
	variables: AreaReferenceVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			AreaReferenceResponse,
			AreaReferenceError,
			TData
		>,
		'queryKey' | 'queryFn' | 'initialData'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		AreaReferenceResponse,
		AreaReferenceError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/offer/reference/area',
			operationId: 'areaReference',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchAreaReference({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type RecommandedError = Fetcher.ErrorWrapper<undefined>

export type RecommandedResponse = Schemas.Offer[]

export type RecommandedVariables = ApiContext['fetcherOptions']

export const fetchRecommanded = (
	variables: RecommandedVariables,
	signal?: AbortSignal
) =>
	apiFetch<RecommandedResponse, RecommandedError, undefined, {}, {}, {}>({
		url: '/api/offer/recommanded',
		method: 'get',
		...variables,
		signal,
	})

export const useRecommanded = <TData = RecommandedResponse,>(
	variables: RecommandedVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			RecommandedResponse,
			RecommandedError,
			TData
		>,
		'queryKey' | 'queryFn' | 'initialData'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<RecommandedResponse, RecommandedError, TData>({
		queryKey: queryKeyFn({
			path: '/api/offer/recommanded',
			operationId: 'recommanded',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchRecommanded({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type GetRecommendedCompaniesError = Fetcher.ErrorWrapper<undefined>

export type GetRecommendedCompaniesResponse = Schemas.Company[]

export type GetRecommendedCompaniesVariables = ApiContext['fetcherOptions']

export const fetchGetRecommendedCompanies = (
	variables: GetRecommendedCompaniesVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		GetRecommendedCompaniesResponse,
		GetRecommendedCompaniesError,
		undefined,
		{},
		{},
		{}
	>({ url: '/api/company/recommended', method: 'get', ...variables, signal })

export const useGetRecommendedCompanies = <
	TData = GetRecommendedCompaniesResponse,
>(
	variables: GetRecommendedCompaniesVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			GetRecommendedCompaniesResponse,
			GetRecommendedCompaniesError,
			TData
		>,
		'queryKey' | 'queryFn' | 'initialData'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		GetRecommendedCompaniesResponse,
		GetRecommendedCompaniesError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/company/recommended',
			operationId: 'getRecommendedCompanies',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchGetRecommendedCompanies(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type QueryOperation =
	| {
			path: '/api/offer/{id}'
			operationId: 'findById'
			variables: FindByIdVariables
	  }
	| {
			path: '/api/offer/search'
			operationId: 'search'
			variables: SearchVariables
	  }
	| {
			path: '/api/offer/reference/department'
			operationId: 'departmentReference'
			variables: DepartmentReferenceVariables
	  }
	| {
			path: '/api/offer/reference/contract-type'
			operationId: 'contractTypeReference'
			variables: ContractTypeReferenceVariables
	  }
	| {
			path: '/api/offer/reference/area'
			operationId: 'areaReference'
			variables: AreaReferenceVariables
	  }
	| {
			path: '/api/offer/recommanded'
			operationId: 'recommanded'
			variables: RecommandedVariables
	  }
	| {
			path: '/api/company/recommended'
			operationId: 'getRecommendedCompanies'
			variables: GetRecommendedCompaniesVariables
	  }
