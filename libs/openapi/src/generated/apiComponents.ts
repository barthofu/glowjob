/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from '@tanstack/react-query'
import { useApiContext, ApiContext } from './apiContext'
import type * as Fetcher from './apiFetcher'
import { apiFetch } from './apiFetcher'
import type * as Schemas from './apiSchemas'

export type FindByIdPathParams = {
	id: string
}

export type FindByIdError = Fetcher.ErrorWrapper<undefined>

export type FindByIdVariables = {
	pathParams: FindByIdPathParams
} & ApiContext['fetcherOptions']

export const fetchFindById = (
	variables: FindByIdVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.Offer,
		FindByIdError,
		undefined,
		{},
		{},
		FindByIdPathParams
	>({ url: '/api/offer/{id}', method: 'get', ...variables, signal })

export const useFindById = <TData = Schemas.Offer,>(
	variables: FindByIdVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<Schemas.Offer, FindByIdError, TData>,
		'queryKey' | 'queryFn' | 'initialData'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<Schemas.Offer, FindByIdError, TData>({
		queryKey: queryKeyFn({
			path: '/api/offer/{id}',
			operationId: 'findById',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchFindById({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type SearchError = Fetcher.ErrorWrapper<undefined>

export type SearchVariables = ApiContext['fetcherOptions']

export const fetchSearch = (variables: SearchVariables, signal?: AbortSignal) =>
	apiFetch<Schemas.ListResultOffer, SearchError, undefined, {}, {}, {}>({
		url: '/api/offer/search',
		method: 'get',
		...variables,
		signal,
	})

export const useSearch = <TData = Schemas.ListResultOffer,>(
	variables: SearchVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<Schemas.ListResultOffer, SearchError, TData>,
		'queryKey' | 'queryFn' | 'initialData'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<Schemas.ListResultOffer, SearchError, TData>({
		queryKey: queryKeyFn({
			path: '/api/offer/search',
			operationId: 'search',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchSearch({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type QueryOperation =
	| {
			path: '/api/offer/{id}'
			operationId: 'findById'
			variables: FindByIdVariables
	  }
	| {
			path: '/api/offer/search'
			operationId: 'search'
			variables: SearchVariables
	  }
